name: Alert on Database Changes in Master

on:
  pull_request:
    branches:
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  send_alert:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Check for database changes in merged PR
        id: check_models
        uses: dorny/paths-filter@v2
        with:
          filters: |
            model_changes:
              - 'db/schema.rb'
              - 'db/migrate/**/*.rb'
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get changed files
        if: steps.check_models.outputs.model_changes == 'true'
        id: changed_files
        run: |
          echo "MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'db/migrate/.*\.rb' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          echo "SCHEMA_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'db/schema.rb' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Extract schema changes
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.SCHEMA_CHANGED == 'true'
        id: schema_diff
        run: |
          # Create a temporary file for the diff output
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- db/schema.rb > full_schema_diff.txt
          
          # Extract actual changes, ignoring file headers
          grep '^[+-]' full_schema_diff.txt | grep -v '^[+-]\{3\}' > schema_changes.txt
          
          # Count total changes
          TOTAL_CHANGES=$(wc -l < schema_changes.txt)
          
          # Take first 20 lines for display
          head -n 20 schema_changes.txt > schema_preview.txt
          
          # Save the schema changes directly to a file we'll read later
          # instead of trying to pass through GitHub outputs
          echo "SCHEMA_PREVIEW_FILE=schema_preview.txt" >> $GITHUB_OUTPUT
          
          # Check if we truncated the output
          if [ "$TOTAL_CHANGES" -gt 20 ]; then
            echo "SCHEMA_CHANGES_TRUNCATED=true" >> $GITHUB_OUTPUT
            echo "TOTAL_CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          else
            echo "SCHEMA_CHANGES_TRUNCATED=false" >> $GITHUB_OUTPUT
            echo "TOTAL_CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          fi

      - name: Install jq
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Prepare Discord notification content
        if: steps.check_models.outputs.model_changes == 'true'
        id: prepare_discord
        run: |
          # Create webhook content file for reliable JSON handling
          cat > discord_payload.json << 'EOF'
          {
            "embeds": [
              {
                "title": "ðŸ“¢ Database Changes in Master",
                "description": "[View PR changes](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files)",
                "color": 3447003,
                "fields": []
              }
            ]
          }
          EOF
          
          # Replace variables in the template
          sed -i "s|\\\${{ github.repository }}|${{ github.repository }}|g" discord_payload.json
          sed -i "s|\\\${{ github.event.pull_request.number }}|${{ github.event.pull_request.number }}|g" discord_payload.json
          
          # Add migration files field if present
          if [[ -n "${{ steps.changed_files.outputs.MIGRATION_FILES }}" ]]; then
            # Format migration files nicely
            MIGRATION_FILES=""
            IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
            for file in "${FILES[@]}"; do
              MIGRATION_FILES="${MIGRATION_FILES}â€¢ \`${file}\`\\n"
            done
            
            # Add field to JSON using jq
            jq --arg files "$MIGRATION_FILES" '.embeds[0].fields += [{"name": "Migration Files Changed", "value": $files}]' discord_payload.json > temp.json && mv temp.json discord_payload.json
          fi
          
          # Add schema changes field if present
          if [[ "${{ steps.changed_files.outputs.SCHEMA_CHANGED }}" == "true" && -n "${{ steps.schema_diff.outputs.SCHEMA_PREVIEW_FILE }}" ]]; then
            # Read schema changes directly from the file
            SCHEMA_CONTENT=$(cat ${{ steps.schema_diff.outputs.SCHEMA_PREVIEW_FILE }})
            
            # Escape backslashes, newlines, and quotes for JSON
            SCHEMA_CONTENT=$(echo "$SCHEMA_CONTENT" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            
            # Use diff syntax highlighting for proper git-style colors in Discord
            SCHEMA_VALUE="\`\`\`diff\\n${SCHEMA_CONTENT}\\n\`\`\`"
            
            # Add truncation notice if needed
            if [[ "${{ steps.schema_diff.outputs.SCHEMA_CHANGES_TRUNCATED }}" == "true" ]]; then
              SCHEMA_VALUE="${SCHEMA_VALUE}\\n\\n*${{ steps.schema_diff.outputs.TOTAL_CHANGE_COUNT }} changes detected, showing first 20 only.*"
            fi
            
            # Add field to JSON using jq
            jq --arg changes "$SCHEMA_VALUE" '.embeds[0].fields += [{"name": "Schema Changes", "value": $changes}]' discord_payload.json > temp.json && mv temp.json discord_payload.json
          fi
          
          # Add footer with simpler message
          jq '.embeds[0].footer = {"text": "ðŸ’¡ Check with dev about changes"}' discord_payload.json > temp.json && mv temp.json discord_payload.json
          
          echo "Prepared Discord payload:"
          cat discord_payload.json

      - name: Send Discord notification
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
