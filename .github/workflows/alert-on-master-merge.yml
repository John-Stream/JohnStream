name: Alert on Database Changes in Master

on:
  pull_request:
    branches:
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  send_alert:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Check for database changes in merged PR
        id: check_models
        uses: dorny/paths-filter@v2
        with:
          filters: |
            model_changes:
              - 'db/schema.rb'
              - 'db/migrate/**/*.rb'
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get changed files
        if: steps.check_models.outputs.model_changes == 'true'
        id: changed_files
        run: |
          echo "MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'db/migrate/.*\.rb' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          echo "SCHEMA_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'db/schema.rb' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Extract schema changes
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.SCHEMA_CHANGED == 'true'
        id: schema_diff
        run: |
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- db/schema.rb > full_schema_diff.txt
          
          grep '^[+-]' full_schema_diff.txt | grep -v '^[+-]\{3\}' > schema_changes.txt
          
          TOTAL_CHANGES=$(wc -l < schema_changes.txt)
          
          head -n 20 schema_changes.txt > schema_preview.txt
        
          echo "SCHEMA_PREVIEW_FILE=schema_preview.txt" >> $GITHUB_OUTPUT
          
          if [ "$TOTAL_CHANGES" -gt 20 ]; then
            echo "SCHEMA_CHANGES_TRUNCATED=true" >> $GITHUB_OUTPUT
            echo "TOTAL_CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          else
            echo "SCHEMA_CHANGES_TRUNCATED=false" >> $GITHUB_OUTPUT
            echo "TOTAL_CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          fi

      - name: Extract migration operations
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.MIGRATION_FILES != ''
        id: migration_operations
        run: |
          IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
          
          # Create a file to store all operations
          > migration_operations.txt
          
          for file in "${FILES[@]}"; do
            echo "## Migration: $file" >> migration_operations.txt
            
            # Check if file exists in one of the commits
            if git ls-tree -r ${{ github.event.pull_request.head.sha }} --name-only | grep -q "^${file}$"; then
              # For new files, we need a different approach
              if ! git ls-tree -r ${{ github.event.pull_request.base.sha }} --name-only | grep -q "^${file}$"; then
                echo "New migration file detected" >> migration_operations.txt
                # Get the entire file content for new files
                git show ${{ github.event.pull_request.head.sha }}:"${file}" | grep -E '(create_table|drop_table|rename_table|create_join_table|add_column|remove_column|rename_column|change_column|change_column_default|change_column_null)' | while read -r line; do
                  echo "+ ${line}" >> migration_operations.txt
                done
              else
                # Extract table operations - use || true to prevent failure if no matches
                git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "${file}" | 
                grep -E '\+([ \t]*)*(create_table|drop_table|rename_table|create_join_table)' || true >> migration_operations.txt
                
                # Extract column operations - use || true to prevent failure if no matches
                git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "${file}" | 
                grep -E '\+([ \t]*)*(add_column|remove_column|rename_column|change_column|change_column_default|change_column_null)' || true >> migration_operations.txt
              fi
            else
              echo "File not found in HEAD commit" >> migration_operations.txt
            fi
            
            echo "" >> migration_operations.txt
          done
          
          # Check if we found any operations
          if [ -s migration_operations.txt ]; then
            echo "HAS_OPERATIONS=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_OPERATIONS=false" >> $GITHUB_OUTPUT
          fi
        shell: /bin/bash -e {0}

      - name: Install jq
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Send Discord initial alert
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "üö® **Database Changes in Master** üö®\n\nDatabase schema changes have been detected."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send migration files notification
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.MIGRATION_FILES != ''
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "üìÑ **Migration Files Changed:**"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
              
          IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
          for file in "${FILES[@]}"; do
            FILE_MSG="‚Ä¢ \`$file\`"
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"$FILE_MSG\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          done

      - name: Send migration operations details
        if: steps.migration_operations.outputs.HAS_OPERATIONS == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "üîç **Database Operations Detected:**"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
            
          echo '```diff' > operations_block.txt
          cat migration_operations.txt >> operations_block.txt
          echo '```' >> operations_block.txt
          
          OPERATIONS_CONTENT=$(cat operations_block.txt | jq -Rs .)
          
          curl -H "Content-Type: application/json" -X POST \
            -d "{\"content\": $OPERATIONS_CONTENT}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send schema changes
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.SCHEMA_CHANGED == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "üîÑ **Schema Changes:**"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

          echo '```diff' > schema_code_block.txt
          cat ${{ steps.schema_diff.outputs.SCHEMA_PREVIEW_FILE }} >> schema_code_block.txt
          echo '```' >> schema_code_block.txt
        
          SCHEMA_DIFF=$(cat schema_code_block.txt | jq -Rs .)
          
          curl -H "Content-Type: application/json" -X POST \
            -d "{\"content\": $SCHEMA_DIFF}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          
          if [[ "${{ steps.schema_diff.outputs.SCHEMA_CHANGES_TRUNCATED }}" == "true" ]]; then
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"‚ö†Ô∏è *${{ steps.schema_diff.outputs.TOTAL_CHANGE_COUNT }} changes detected, showing first 20 only.*\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi

      - name: Send final notification with mentions
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "üí° Check with dev team about these changes <@adrianomanferdini> <@kaylamarsden>"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}