name: Alert on Database Changes in Master

on:
  pull_request:
    branches:
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  send_alert:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Check for database changes in merged PR
        id: check_models
        uses: dorny/paths-filter@v2
        with:
          filters: |
            model_changes:
              - 'db/schema.rb'
              - 'db/migrate/**/*.rb'
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get changed files
        if: steps.check_models.outputs.model_changes == 'true'
        id: changed_files
        run: |
          echo "MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'db/migrate/.*\.rb' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          echo "SCHEMA_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'db/schema.rb' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Extract schema changes
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.SCHEMA_CHANGED == 'true'
        id: schema_diff
        run: |
          CHANGES=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- db/schema.rb | grep '^[+-]' | grep -v '^[+-]\{3\}' | head -n 20)
          echo "SCHEMA_CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ ${#CHANGES} -gt 1500 ]; then
            echo "SCHEMA_CHANGES_TRUNCATED=true" >> $GITHUB_OUTPUT
          else
            echo "SCHEMA_CHANGES_TRUNCATED=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord notification about database changes
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          # Create a basic message with primary information
          MESSAGE="ðŸš¨ **DATABASE CHANGES MERGED TO MASTER**\n\n"
          MESSAGE+="**PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}\n"
          MESSAGE+="**PR Link:** https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}\n"
          MESSAGE+="**Merged by:** ${{ github.event.pull_request.merged_by.login }}\n\n"
          
          # Add information about migration files
          if [[ -n "${{ steps.changed_files.outputs.MIGRATION_FILES }}" ]]; then
            MESSAGE+="**Migration Files Changed:**\n"
            IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
            for file in "${FILES[@]}"; do
              MESSAGE+="- \`$file\`\n"
            done
            MESSAGE+="\n"
          fi
          
          # Add information about schema changes
          if [[ "${{ steps.changed_files.outputs.SCHEMA_CHANGED }}" == "true" ]]; then
            MESSAGE+="**Schema Changes Detected**\n"
            MESSAGE+="[View full schema changes](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files)\n\n"
            
            if [[ -n "${{ steps.schema_diff.outputs.SCHEMA_CHANGES }}" ]]; then
              # Take just the first few lines to avoid issues with large diffs
              MESSAGE+="Preview of changes:\n\`\`\`diff\n"
              MESSAGE+=$(echo "${{ steps.schema_diff.outputs.SCHEMA_CHANGES }}" | head -n 10)
              MESSAGE+="\n\`\`\`\n"
              
              if [[ "${{ steps.schema_diff.outputs.SCHEMA_CHANGES_TRUNCATED }}" == "true" ]]; then
                MESSAGE+="*Schema changes truncated. See PR for full diff.*\n\n"
              fi
            fi
          fi
          
          # Add action required message
          MESSAGE+="\n**ACTION REQUIRED**: Please update your local databases accordingly."
          
          # Send to Discord using simple content field
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" ${{ secrets.DISCORD_WEBHOOK_URL }}
