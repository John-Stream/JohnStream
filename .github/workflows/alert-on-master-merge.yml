name: Alert on Database Changes in Master

on:
  pull_request:
    branches:
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  send_alert:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Check for database changes in merged PR
        id: check_models
        uses: dorny/paths-filter@v2
        with:
          filters: |
            model_changes:
              - 'db/schema.rb'
              - 'db/migrate/**/*.rb'
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get changed files
        if: steps.check_models.outputs.model_changes == 'true'
        id: changed_files
        run: |
          echo "MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'db/migrate/.*\.rb' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT

      - name: Extract migration operations
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.MIGRATION_FILES != ''
        id: migration_operations
        run: |
          IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
          
          > migration_operations.txt
          
          # Define our target operations for logging
          TABLE_OPS="create_table|drop_table|rename_table|create_join_table"
          COLUMN_OPS="add_column|remove_column|rename_column|change_column"
          ALL_OPS="${TABLE_OPS}|${COLUMN_OPS}"

          # Define critical operations that trigger mentions
          CRITICAL_COLUMN_OPS="add_column|remove_column|rename_column|change_column"
          CRITICAL_TABLE_OPS="drop_table|rename_table"
          CRITICAL_OPS_REGEX="${CRITICAL_COLUMN_OPS}|${CRITICAL_TABLE_OPS}"
          
          has_critical_ops_flag=false
          
          for file in "${FILES[@]}"; do
            echo "## Migration: $file" >> migration_operations.txt
            current_file_operations=""
            
            if git ls-tree -r ${{ github.event.pull_request.head.sha }} --name-only | grep -q "^${file}$"; then
              if ! git ls-tree -r ${{ github.event.pull_request.base.sha }} --name-only | grep -q "^${file}$"; then
                echo "New migration file detected" >> migration_operations.txt
                git show ${{ github.event.pull_request.head.sha }}:"${file}" > temp_file.rb
                
                # Handle create_table operations
                awk -v RS= -v ORS="\n\n" '/create_table/' temp_file.rb | sed 's/^/+ /' >> migration_operations.txt
                current_file_operations+=$(awk -v RS= -v ORS="\n" '/create_table/' temp_file.rb)
                
                # Get all other target operations but exclude lines within blocks
                other_ops=$(grep -E "^[[:space:]]*(${COLUMN_OPS}|drop_table|rename_table|create_join_table)" temp_file.rb | 
                  grep -v -f <(sed -n '/create_table/,/end/p' temp_file.rb) |
                  sed 's/^/+ /') || true
                echo "$other_ops" >> migration_operations.txt
                current_file_operations+=$'\n'"$other_ops"
              else
                git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- "${file}" > temp_diff.txt
                
                # Extract create_table blocks that were added
                create_blocks=$(awk '
                  BEGIN { block=""; in_block=0; block_indent="" }
                  /^\+[[:space:]]*create_table/ {
                    if (in_block) { block=block $0; print block; block=""; in_block=0; } # print previous if any, then reset
                    block=$0 "\n"; 
                    in_block=1; 
                    match($0, /^\+[[:space:]]*/);
                    block_indent=substr($0, RSTART, RLENGTH);
                    next;
                  }
                  in_block && $0 ~ "^" block_indent "end" { 
                    block=block $0; 
                    print block; 
                    block=""; 
                    in_block=0; 
                    next;
                  }
                  in_block { block=block $0 "\n"; }
                  END { if (in_block) print block; }
                ' <(grep -A 50 "^\+[[:space:]]*create_table" temp_diff.txt || true) ) || true
                echo "$create_blocks" >> migration_operations.txt
                current_file_operations+=$'\n'"$create_blocks"
                
                # Get other added operations (not within blocks)
                other_added_ops=$(grep -E "^\+[[:space:]]*(${COLUMN_OPS}|drop_table|rename_table|create_join_table)" temp_diff.txt) || true
                echo "$other_added_ops" >> migration_operations.txt
                current_file_operations+=$'\n'"$other_added_ops"
              fi
            else
              echo "File not found in HEAD commit" >> migration_operations.txt
            fi
            
            # Check for critical operations in the current file's detected operations
            if echo "$current_file_operations" | grep -qE "(${CRITICAL_OPS_REGEX})"; then
              has_critical_ops_flag=true
            fi
            
            echo "" >> migration_operations.txt
          done
          
          if [ -s migration_operations.txt ] && [ "$(wc -l < migration_operations.txt)" -gt "${#FILES[@]}" ]; then # Check if more than just headers
            echo "HAS_OPERATIONS=true" >> $GITHUB_OUTPUT
          else
            # If migration_operations.txt only contains headers or is empty, effectively no operations.
            echo "HAS_OPERATIONS=false" >> $GITHUB_OUTPUT
            # Clear the file if it only contains headers to prevent false positives later
            if [ -s migration_operations.txt ]; then > migration_operations.txt; fi
          fi
          
          if [ "$has_critical_ops_flag" = true ]; then
            echo "HAS_CRITICAL_OPERATIONS=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_CRITICAL_OPERATIONS=false" >> $GITHUB_OUTPUT
          fi
        shell: /bin/bash -e {0}

      - name: Install jq
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Send Discord initial alert
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "🚨 **Database Changes in Master** 🚨"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send migration files notification
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.MIGRATION_FILES != ''
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "📄 **Migration Files Changed:**"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
              
          IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
          for file in "${FILES[@]}"; do
            FILE_MSG="• \`$file\`"
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"$FILE_MSG\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          done

      - name: Send migration operations details
        if: steps.migration_operations.outputs.HAS_OPERATIONS == 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "🔍 **Database Operations Detected:**"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
            
          echo '```diff' > operations_block.txt
          cat migration_operations.txt >> operations_block.txt
          echo '```' >> operations_block.txt
          
          OPERATIONS_CONTENT=$(cat operations_block.txt | jq -Rs .)
          
          curl -H "Content-Type: application/json" -X POST \
            -d "{\"content\": $OPERATIONS_CONTENT}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send final notification with mentions
        if: steps.check_models.outputs.model_changes == 'true' && steps.migration_operations.outputs.HAS_CRITICAL_OPERATIONS == 'true'
        run: |
          USER_ID_1="1335927260842033214"
          USER_ID_2="1080420050500079677"
          USER_ID_3="1356505700930683041"
          
          JSON_PAYLOAD=$(cat <<EOF
          {
            "content": "💡 Check with dev team about these CRITICAL changes <@${USER_ID_1}> <@${USER_ID_2}> <@${USER_ID_3}>",
            "allowed_mentions": {
              "users": ["${USER_ID_1}", "${USER_ID_2}", "${USER_ID_3}"]
            }
          }
          EOF
          )
          
          curl -H "Content-Type: application/json" -X POST \
            -d "$JSON_PAYLOAD" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send final notification (log only)
        if: steps.check_models.outputs.model_changes == 'true' && steps.migration_operations.outputs.HAS_OPERATIONS == 'true' && steps.migration_operations.outputs.HAS_CRITICAL_OPERATIONS != 'true'
        run: |
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "💡 Database changes processed (log only, no critical operations detected)."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}