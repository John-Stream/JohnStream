name: Alert on Database Changes in Master

on:
  pull_request:
    branches:
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  send_alert:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Check for database changes in merged PR
        id: check_models
        uses: dorny/paths-filter@v2
        with:
          filters: |
            model_changes:
              - 'db/schema.rb'
              - 'db/migrate/**/*.rb'
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get changed files
        if: steps.check_models.outputs.model_changes == 'true'
        id: changed_files
        run: |
          echo "MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'db/migrate/.*\.rb' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          echo "SCHEMA_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'db/schema.rb' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Extract schema changes
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.SCHEMA_CHANGED == 'true'
        id: schema_diff
        run: |
          CHANGES=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- db/schema.rb | grep '^[+-]' | grep -v '^[+-]\{3\}' | head -n 20)
          echo "SCHEMA_CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ ${#CHANGES} -gt 1500 ]; then
            echo "SCHEMA_CHANGES_TRUNCATED=true" >> $GITHUB_OUTPUT
          else
            echo "SCHEMA_CHANGES_TRUNCATED=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord notification about database changes
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          # Send the initial header message
          curl -H "Content-Type: application/json" -X POST \
            --data '{"content": "ðŸ“¢ **Database Changes in Master**"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          
          # Send PR link in a separate message
          curl -H "Content-Type: application/json" -X POST \
            --data "{\"content\": \"**PR Link:** https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          
          # Handle migration files if present
          if [[ -n "${{ steps.changed_files.outputs.MIGRATION_FILES }}" ]]; then
            # Send migration header
            curl -H "Content-Type: application/json" -X POST \
              --data '{"content": "**Migration Files Changed:**"}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
            
            # Process and send each migration file on its own line
            IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
            for file in "${FILES[@]}"; do
              curl -H "Content-Type: application/json" -X POST \
                --data "{\"content\": \"- \`$file\`\"}" \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
            done
          fi
          
          # Handle schema changes if present
          if [[ "${{ steps.changed_files.outputs.SCHEMA_CHANGED }}" == "true" ]]; then
            # Send schema changes header
            curl -H "Content-Type: application/json" -X POST \
              --data '{"content": "**Schema Changes:**"}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
            
            # Process and send schema diff if available
            if [[ -n "${{ steps.schema_diff.outputs.SCHEMA_CHANGES }}" ]]; then
              # Save diff to a file
              echo "${{ steps.schema_diff.outputs.SCHEMA_CHANGES }}" > schema_diff.txt
              
              # Format the diff content for Discord's code block
              DIFF_CONTENT=$(cat schema_diff.txt | head -n 15 | sed 's/"/\\"/g')
              
              # Send the diff as a code block
              DIFF_MSG="\`\`\`diff\n${DIFF_CONTENT}\n\`\`\`"
              curl -H "Content-Type: application/json" -X POST \
                --data "{\"content\": \"${DIFF_MSG}\"}" \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
              
              # Send truncation notice if needed
              if [[ "${{ steps.schema_diff.outputs.SCHEMA_CHANGES_TRUNCATED }}" == "true" ]]; then
                curl -H "Content-Type: application/json" -X POST \
                  --data "{\"content\": \"*Schema changes truncated. [View full changes here](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files)*\"}" \
                  ${{ secrets.DISCORD_WEBHOOK_URL }}
              fi
            fi
          fi
          
          # Send gentle note at the end
          curl -H "Content-Type: application/json" -X POST \
            --data '{"content": "ðŸ’¡ **Note**: You may need to update your local database to reflect these changes."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
