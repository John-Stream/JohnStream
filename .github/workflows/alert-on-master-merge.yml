name: Alert on Database Changes in Master

on:
  pull_request:
    branches:
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  send_alert:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Check for database changes in merged PR
        id: check_models
        uses: dorny/paths-filter@v2
        with:
          filters: |
            model_changes:
              - 'db/schema.rb'
              - 'db/migrate/**/*.rb'
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Get changed files
        if: steps.check_models.outputs.model_changes == 'true'
        id: changed_files
        run: |
          echo "MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'db/migrate/.*\.rb' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          echo "SCHEMA_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'db/schema.rb' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Extract schema changes
        if: steps.check_models.outputs.model_changes == 'true' && steps.changed_files.outputs.SCHEMA_CHANGED == 'true'
        id: schema_diff
        run: |
          # Create a temporary file for the diff output
          git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- db/schema.rb > full_schema_diff.txt
          
          # Extract actual changes, ignoring file headers
          grep '^[+-]' full_schema_diff.txt | grep -v '^[+-]\{3\}' > schema_changes.txt
          
          # Count total changes
          TOTAL_CHANGES=$(wc -l < schema_changes.txt)
          
          # Take first 20 lines for display
          head -n 20 schema_changes.txt > schema_preview.txt
          
          # Save the schema changes directly to a file we'll read later
          # instead of trying to pass through GitHub outputs
          echo "SCHEMA_PREVIEW_FILE=schema_preview.txt" >> $GITHUB_OUTPUT
          
          # Check if we truncated the output
          if [ "$TOTAL_CHANGES" -gt 20 ]; then
            echo "SCHEMA_CHANGES_TRUNCATED=true" >> $GITHUB_OUTPUT
            echo "TOTAL_CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          else
            echo "SCHEMA_CHANGES_TRUNCATED=false" >> $GITHUB_OUTPUT
            echo "TOTAL_CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          fi

      - name: Install jq
        if: steps.check_models.outputs.model_changes == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Prepare Discord notification
        if: steps.check_models.outputs.model_changes == 'true'
        id: prepare_discord
        run: |
          # Create content variable directly in the proper format
          CONTENT='{"content": "**Database Changes in Master**\n\n[View PR changes](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files)"}'
          
          # Use simple content (avoids issues with embed formatting)
          echo "$CONTENT" > discord_payload.json
          
          # Show the content
          cat discord_payload.json
          
          # Send the initial notification
          curl -H "Content-Type: application/json" -X POST \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
          
          # Add migration files as a separate message if present
          if [[ -n "${{ steps.changed_files.outputs.MIGRATION_FILES }}" ]]; then
            MIGRATION_MSG="**Migration Files Changed:**"
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"$MIGRATION_MSG\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
              
            # Send each file as a bullet point in a separate message
            IFS=',' read -ra FILES <<< "${{ steps.changed_files.outputs.MIGRATION_FILES }}"
            for file in "${FILES[@]}"; do
              FILE_MSG="â€¢ \`$file\`"
              curl -H "Content-Type: application/json" -X POST \
                -d "{\"content\": \"$FILE_MSG\"}" \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
            done
          fi
          
          # Add schema changes as a separate message if present
          if [[ "${{ steps.changed_files.outputs.SCHEMA_CHANGED }}" == "true" && -n "${{ steps.schema_diff.outputs.SCHEMA_PREVIEW_FILE }}" ]]; then
            # Send header first
            SCHEMA_HEADER="**Schema Changes:**"
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": \"$SCHEMA_HEADER\"}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
            
            # Create the diff block with proper JSON escaping
            echo '```diff' > schema_code_block.txt
            cat ${{ steps.schema_diff.outputs.SCHEMA_PREVIEW_FILE }} >> schema_code_block.txt
            echo '```' >> schema_code_block.txt
            
            # Properly escape the content for JSON
            SCHEMA_DIFF=$(cat schema_code_block.txt | jq -Rs .)
            
            # Send the escaped content in a proper JSON structure
            curl -H "Content-Type: application/json" -X POST \
              -d "{\"content\": $SCHEMA_DIFF}" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
            
            # Add truncation notice if needed
            if [[ "${{ steps.schema_diff.outputs.SCHEMA_CHANGES_TRUNCATED }}" == "true" ]]; then
              TRUNCATE_MSG="*${{ steps.schema_diff.outputs.TOTAL_CHANGE_COUNT }} changes detected, showing first 20 only.*"
              curl -H "Content-Type: application/json" -X POST \
                -d "{\"content\": \"$TRUNCATE_MSG\"}" \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
            fi
          fi
          
          # Add footer message
          curl -H "Content-Type: application/json" -X POST \
            -d '{"content": "ðŸ’¡ Check with dev about changes"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      # Discord notifications are now handled directly in the prepare step
